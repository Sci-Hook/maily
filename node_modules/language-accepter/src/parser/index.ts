import { get_accept_language } from "./accept-language";
import { parser } from "../utils/parser";
import { languages } from "../types/languages";
import { Request, Response, NextFunction } from 'express';
import 'syncforeachloop';

export function languageParser(config:languages|string) {

    var options:languages;

    if (typeof config == 'string') {
        var data = parser(config + '.json');
        if (!data) {
            console.error('Config file could not be opened.');
        }else{
            options = data;
        }
    }else{
        options = config;
    }
    
    return async (req:Request,res:Response,next:NextFunction) => {

        const accepted_languages = options["accepted-languages"];
        const alternative_languages = options["alternative-languages"];
        const default_language = options["default-language"];
        const auto_create_language_cookie = options["autocreate-lanuage-cookie"];

        var lang;

        var param_key =  options["params-key"];
        if (param_key) {
            if (req.params[param_key]) {
                if (accepted_languages.indexOf(req.params[param_key]) != -1) {
                    lang = req.params[param_key]
                }
            }
        }

        var query_key =  options["query-key"];
        if (!lang) {
            if (query_key) {
                if (req.query[query_key]) {
                    if(typeof req.query[query_key] =='string'){
                        if (accepted_languages.indexOf((<string>req.query[query_key])) != -1) {
                            lang = req.query[query_key]
                        }
                    }
                    
                }  
            } 
        }
        
        if(!lang){
            var cookie_key =  options["cookie-key"];
            if (cookie_key) {
                if (req.cookies) {
                    if (req.cookies[cookie_key]) {
                        if (accepted_languages.indexOf(req.cookies[cookie_key]) != -1) {
                            lang = req.cookies[cookie_key]
                        }
                    }
                }
            }
        }

        if (!lang) {
            if (req.headers['accept-language']) {
                lang = await get_accept_language(
                    req.headers['accept-language'],
                    accepted_languages,
                    alternative_languages,
                    default_language
                );
            }else{
                lang = default_language;
            }
        }
        
        (<any>res).lang = lang;

        if (auto_create_language_cookie) {
            res.cookie(auto_create_language_cookie?.name,lang,{
                expires: new Date(Date.now() + auto_create_language_cookie?.expires),
            })  
        }

        if (global.lang_files) {
            if (typeof global.lang_files[lang] == 'object') {
                res.locals.i18n = Object.assign({},global.lang_files[lang]);
            }
        }
        
        next();        
    }
}